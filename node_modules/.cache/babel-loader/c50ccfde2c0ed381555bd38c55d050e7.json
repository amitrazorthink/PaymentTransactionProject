{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(transactionSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(transactionDetailsSaga),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\n/* global fetch */\nimport { all, call, delay, put, take, takeLatest, takeEvery } from 'redux-saga/effects';\nimport es6promise from 'es6-promise';\nimport 'isomorphic-unfetch';\nimport { actionTypes, saveTransactionError, saveTransactionSuccess, getTransactionSuccess, getTransactionError } from './actions';\nes6promise.polyfill();\n\nfunction transactionSaga(_ref) {\n  var payload, res, data;\n  return _regeneratorRuntime.wrap(function transactionSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _ref.payload;\n          console.log('I am in create Saga');\n          _context.prev = 2;\n          _context.next = 5;\n          return fetch('http://localhost:3000/rest/create', {\n            method: \"POST\",\n            body: _JSON$stringify(payload),\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          });\n\n        case 5:\n          res = _context.sent;\n          _context.next = 8;\n          return res.json();\n\n        case 8:\n          data = _context.sent;\n          _context.next = 11;\n          return put(saveTransactionSuccess(data));\n\n        case 11:\n          _context.next = 17;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](2);\n          _context.next = 17;\n          return put(saveTransactionError(_context.t0));\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 13]]);\n}\n\nfunction transactionDetailsSaga() {\n  var _res, _data;\n\n  return _regeneratorRuntime.wrap(function transactionDetailsSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log('I am in Get Saga');\n          _context2.prev = 1;\n          _context2.next = 4;\n          return fetch('http://localhost:3000/rest/transactions', {\n            method: \"GET\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          });\n\n        case 4:\n          _res = _context2.sent;\n          _context2.next = 7;\n          return _res.json();\n\n        case 7:\n          _data = _context2.sent;\n          console.log('Data In GET', _data);\n          _context2.next = 11;\n          return put(getTransactionSuccess(_data));\n\n        case 11:\n          _context2.next = 17;\n          break;\n\n        case 13:\n          _context2.prev = 13;\n          _context2.t0 = _context2[\"catch\"](1);\n          _context2.next = 17;\n          return put(getTransactionError(_context2.t0));\n\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 13]]);\n}\n\nfunction rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([takeLatest(actionTypes.ACTION_SAVE_TRANSACTION, transactionSaga), takeEvery(actionTypes.ACTION_GET_TRANSACTION, transactionDetailsSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["/Users/amithkumar/with-redux-saga/saga.js"],"names":["transactionSaga","transactionDetailsSaga","rootSaga","all","call","delay","put","take","takeLatest","takeEvery","es6promise","actionTypes","saveTransactionError","saveTransactionSuccess","getTransactionSuccess","getTransactionError","polyfill","payload","console","log","fetch","method","body","headers","res","json","data","ACTION_SAVE_TRANSACTION","ACTION_GET_TRANSACTION"],"mappings":";;;;;yBAeWA,e;;;yBAkBAC,sB;;;yBAkBAC,Q;;AAnDX;AAEA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,GAA3B,EAAgCC,IAAhC,EAAsCC,UAAtC,EAAkDC,SAAlD,QAAmE,oBAAnE;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAO,oBAAP;AAEA,SAASC,WAAT,EACSC,oBADT,EAEQC,sBAFR,EAGQC,qBAHR,EAIQC,mBAJR,QAKe,WALf;AAOAL,UAAU,CAACM,QAAX;;AAEA,SAAWhB,eAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8BiB,UAAAA,OAA9B,QAA8BA,OAA9B;AACEC,UAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AADF;AAAA;AAGgB,iBAAMC,KAAK,CAAC,mCAAD,EAAsC;AAC3DC,YAAAA,MAAM,EAAE,MADmD;AAE3DC,YAAAA,IAAI,EAAE,gBAAeL,OAAf,CAFqD;AAG3DM,YAAAA,OAAO,EAAE;AACP,8BAAgB;AADT;AAHkD,WAAtC,CAAX;;AAHhB;AAGUC,UAAAA,GAHV;AAAA;AAUiB,iBAAMA,GAAG,CAACC,IAAJ,EAAN;;AAVjB;AAUUC,UAAAA,IAVV;AAAA;AAWI,iBAAMpB,GAAG,CAACO,sBAAsB,CAACa,IAAD,CAAvB,CAAT;;AAXJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAaI,iBAAMpB,GAAG,CAACM,oBAAoB,aAArB,CAAT;;AAbJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAWX,sBAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AACEiB,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AADF;AAAA;AAGgB,iBAAMC,KAAK,CAAC,yCAAD,EAA4C;AACjEC,YAAAA,MAAM,EAAE,KADyD;AAEjEE,YAAAA,OAAO,EAAE;AACP,8BAAgB;AADT;AAFwD,WAA5C,CAAX;;AAHhB;AAGUC,UAAAA,IAHV;AAAA;AASiB,iBAAMA,IAAG,CAACC,IAAJ,EAAN;;AATjB;AASUC,UAAAA,KATV;AAUIR,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BO,KAA3B;AAVJ;AAWI,iBAAMpB,GAAG,CAACQ,qBAAqB,CAACY,KAAD,CAAtB,CAAT;;AAXJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAaI,iBAAMpB,GAAG,CAACS,mBAAmB,cAApB,CAAT;;AAbJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAWb,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMC,GAAG,CAAC,CACRK,UAAU,CAACG,WAAW,CAACgB,uBAAb,EAAsC3B,eAAtC,CADF,EAERS,SAAS,CAACE,WAAW,CAACiB,sBAAb,EAAqC3B,sBAArC,CAFD,CAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,eAAeC,QAAf","sourcesContent":["/* global fetch */\n\nimport { all, call, delay, put, take, takeLatest, takeEvery } from 'redux-saga/effects'\nimport es6promise from 'es6-promise'\nimport 'isomorphic-unfetch'\n\nimport { actionTypes,\n         saveTransactionError, \n        saveTransactionSuccess, \n        getTransactionSuccess,\n        getTransactionError,\n        } from './actions'\n\nes6promise.polyfill()\n\nfunction * transactionSaga ({ payload }) {\n  console.log('I am in create Saga')\n  try {\n    const res = yield fetch('http://localhost:3000/rest/create', {\n      method: \"POST\",\n      body: JSON.stringify(payload),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      }\n    });\n    const data = yield res.json();\n    yield put(saveTransactionSuccess(data))\n  } catch (err) {\n    yield put(saveTransactionError(err))\n  }\n}\n\n\nfunction * transactionDetailsSaga () {\n  console.log('I am in Get Saga')\n  try {\n    const res = yield fetch('http://localhost:3000/rest/transactions', {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      }\n    });\n    const data = yield res.json();\n    console.log('Data In GET', data);\n    yield put(getTransactionSuccess(data))\n  } catch (err) {\n    yield put(getTransactionError(err))\n  }\n}\n\n\nfunction * rootSaga () {\n  yield all([\n    takeLatest(actionTypes.ACTION_SAVE_TRANSACTION, transactionSaga),\n    takeEvery(actionTypes.ACTION_GET_TRANSACTION, transactionDetailsSaga)\n  ])\n}\n\nexport default rootSaga\n"]},"metadata":{},"sourceType":"module"}