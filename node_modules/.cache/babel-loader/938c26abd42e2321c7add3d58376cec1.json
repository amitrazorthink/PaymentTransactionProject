{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(runClockSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadDataSaga),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(transactionSaga),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(transactionDetailsSaga),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\n/* global fetch */\nimport { all, call, delay, put, take, takeLatest, takeEvery } from 'redux-saga/effects';\nimport es6promise from 'es6-promise';\nimport 'isomorphic-unfetch';\nimport { actionTypes, failure, loadDataSuccess, tickClock, saveTransactionError, saveTransactionSuccess, getTransactionSuccess, getTransactionError, ACTION_SAVE_TRANSACTION, ACTION_GET_TRANSACTION } from './actions';\nes6promise.polyfill();\n\nfunction runClockSaga() {\n  return _regeneratorRuntime.wrap(function runClockSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return take(actionTypes.START_CLOCK);\n\n        case 2:\n          if (!true) {\n            _context.next = 9;\n            break;\n          }\n\n          _context.next = 5;\n          return put(tickClock(false));\n\n        case 5:\n          _context.next = 7;\n          return delay(1000);\n\n        case 7:\n          _context.next = 2;\n          break;\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction loadDataSaga() {\n  var res, data;\n  return _regeneratorRuntime.wrap(function loadDataSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return fetch('https://jsonplaceholder.typicode.com/users');\n\n        case 3:\n          res = _context2.sent;\n          alert(\"Submitting Name ABS \".concat(res.json()));\n          console.log('Response from SAga', res);\n          _context2.next = 8;\n          return res.json();\n\n        case 8:\n          data = _context2.sent;\n          _context2.next = 11;\n          return put(loadDataSuccess(data));\n\n        case 11:\n          _context2.next = 17;\n          break;\n\n        case 13:\n          _context2.prev = 13;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 17;\n          return put(failure(_context2.t0));\n\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 13]]);\n}\n\nfunction transactionSaga(_ref) {\n  var payload, _res, _data;\n\n  return _regeneratorRuntime.wrap(function transactionSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          payload = _ref.payload;\n          console.log('I am in Saga');\n          _context3.prev = 2;\n          _context3.next = 5;\n          return fetch('http://localhost:3000/rest/create', {\n            method: \"POST\",\n            body: _JSON$stringify(payload),\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          });\n\n        case 5:\n          _res = _context3.sent;\n          console.log(_res);\n          console.log('Response from SAga', _res); // alert(`Submitting Name ABS ${res.json()}`)\n          // const data = yield res.json()\n\n          _context3.next = 10;\n          return _res.json();\n\n        case 10:\n          _data = _context3.sent;\n          console.log('Data', _data);\n          _context3.next = 14;\n          return put(saveTransactionSuccess(_data));\n\n        case 14:\n          _context3.next = 20;\n          break;\n\n        case 16:\n          _context3.prev = 16;\n          _context3.t0 = _context3[\"catch\"](2);\n          _context3.next = 20;\n          return put(saveTransactionError(_context3.t0));\n\n        case 20:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[2, 16]]);\n}\n\nfunction transactionDetailsSaga() {\n  var _res2, _data2;\n\n  return _regeneratorRuntime.wrap(function transactionDetailsSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          console.log('I am in Get Saga');\n          _context4.prev = 1;\n          _context4.next = 4;\n          return fetch('http://localhost:3000/rest/transactions', {\n            method: \"GET\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          });\n\n        case 4:\n          _res2 = _context4.sent;\n          console.log('Response from Get', _res2);\n          _context4.next = 8;\n          return _res2.json();\n\n        case 8:\n          _data2 = _context4.sent;\n          console.log('Data', _data2);\n          _context4.next = 12;\n          return put(getTransactionSuccess(_data2));\n\n        case 12:\n          _context4.next = 18;\n          break;\n\n        case 14:\n          _context4.prev = 14;\n          _context4.t0 = _context4[\"catch\"](1);\n          _context4.next = 18;\n          return put(getTransactionError(_context4.t0));\n\n        case 18:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[1, 14]]);\n}\n\nfunction rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([call(runClockSaga), takeLatest(actionTypes.LOAD_DATA, loadDataSaga), takeLatest(actionTypes.ACTION_SAVE_TRANSACTION, transactionSaga), takeEvery(actionTypes.ACTION_GET_TRANSACTION, transactionDetailsSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["/Users/amithkumar/with-redux-saga/saga.js"],"names":["runClockSaga","loadDataSaga","transactionSaga","transactionDetailsSaga","rootSaga","all","call","delay","put","take","takeLatest","takeEvery","es6promise","actionTypes","failure","loadDataSuccess","tickClock","saveTransactionError","saveTransactionSuccess","getTransactionSuccess","getTransactionError","ACTION_SAVE_TRANSACTION","ACTION_GET_TRANSACTION","polyfill","START_CLOCK","fetch","res","alert","json","console","log","data","payload","method","body","headers","LOAD_DATA"],"mappings":"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","sourcesContent":["/* global fetch */\n\nimport { all, call, delay, put, take, takeLatest, takeEvery } from 'redux-saga/effects'\nimport es6promise from 'es6-promise'\nimport 'isomorphic-unfetch'\n\nimport { actionTypes, failure, loadDataSuccess, \n         tickClock, saveTransactionError, \n        saveTransactionSuccess, \n        getTransactionSuccess,\n        getTransactionError,\n        ACTION_SAVE_TRANSACTION, \n        ACTION_GET_TRANSACTION } from './actions'\n\nes6promise.polyfill()\n\nfunction * runClockSaga () {\n  yield take(actionTypes.START_CLOCK)\n  while (true) {\n    yield put(tickClock(false))\n    yield delay(1000)\n  }\n}\n\nfunction * loadDataSaga () {\n  try {\n    const res = yield fetch('https://jsonplaceholder.typicode.com/users')\n    alert(`Submitting Name ABS ${res.json()}`)\n    console.log('Response from SAga', res);\n    const data = yield res.json()\n    yield put(loadDataSuccess(data))\n  } catch (err) {\n    yield put(failure(err))\n  }\n}\n\nfunction * transactionSaga ({ payload }) {\n  console.log('I am in Saga')\n  try {\n    const res = yield fetch('http://localhost:3000/rest/create', {\n      method: \"POST\",\n      body: JSON.stringify(payload),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      }\n    });\n    console.log(res);\n    console.log('Response from SAga', res);\n    // alert(`Submitting Name ABS ${res.json()}`)\n    // const data = yield res.json()\n    const data = yield res.json();\n    console.log('Data', data);\n    yield put(saveTransactionSuccess(data))\n  } catch (err) {\n    yield put(saveTransactionError(err))\n  }\n}\n\n\nfunction * transactionDetailsSaga () {\n  console.log('I am in Get Saga')\n  try {\n    const res = yield fetch('http://localhost:3000/rest/transactions', {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      }\n    });\n    console.log('Response from Get', res);\n    const data = yield res.json();\n    console.log('Data', data);\n    yield put(getTransactionSuccess(data))\n  } catch (err) {\n    yield put(getTransactionError(err))\n  }\n}\n\n\nfunction * rootSaga () {\n  yield all([\n    call(runClockSaga),\n    takeLatest(actionTypes.LOAD_DATA, loadDataSaga),\n    takeLatest(actionTypes.ACTION_SAVE_TRANSACTION, transactionSaga),\n    takeEvery(actionTypes.ACTION_GET_TRANSACTION, transactionDetailsSaga)\n\n\n  ])\n}\n\nexport default rootSaga\n"]},"metadata":{},"sourceType":"module"}