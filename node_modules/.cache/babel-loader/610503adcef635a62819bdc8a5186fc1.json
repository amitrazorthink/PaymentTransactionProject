{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(runClockSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadDataSaga),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(transactionSaga),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\n/* global fetch */\nimport { all, call, delay, put, take, takeLatest } from 'redux-saga/effects';\nimport es6promise from 'es6-promise';\nimport 'isomorphic-unfetch';\nimport { actionTypes, failure, loadDataSuccess, tickClock, saveTransactionError, saveTransactionSuccess, ACTION_SAVE_TRANSACTION } from './actions';\nes6promise.polyfill();\n\nfunction runClockSaga() {\n  return _regeneratorRuntime.wrap(function runClockSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return take(actionTypes.START_CLOCK);\n\n        case 2:\n          if (!true) {\n            _context.next = 9;\n            break;\n          }\n\n          _context.next = 5;\n          return put(tickClock(false));\n\n        case 5:\n          _context.next = 7;\n          return delay(1000);\n\n        case 7:\n          _context.next = 2;\n          break;\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction loadDataSaga() {\n  var res;\n  return _regeneratorRuntime.wrap(function loadDataSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return fetch('http://localhost:3000/rest/test');\n\n        case 3:\n          res = _context2.sent;\n          _context2.next = 10;\n          break;\n\n        case 6:\n          _context2.prev = 6;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 10;\n          return put(failure(_context2.t0));\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 6]]);\n}\n\nfunction transactionSaga() {\n  var _res, data;\n\n  return _regeneratorRuntime.wrap(function transactionSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          console.log('I am in Saga');\n          _context3.prev = 1;\n          _context3.next = 4;\n          return fetch('http://localhost:3000/rest/test');\n\n        case 4:\n          _res = _context3.sent;\n          console.log(_res);\n          console.log('Response from SAga', _res);\n          alert(\"Submitting Name ABS \".concat(_res.json()));\n          _context3.next = 10;\n          return _res.json();\n\n        case 10:\n          data = _context3.sent;\n          _context3.next = 13;\n          return put(saveTransactionSuccess(data));\n\n        case 13:\n          _context3.next = 19;\n          break;\n\n        case 15:\n          _context3.prev = 15;\n          _context3.t0 = _context3[\"catch\"](1);\n          _context3.next = 19;\n          return put(saveTransactionError(_context3.t0));\n\n        case 19:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[1, 15]]);\n}\n\nfunction rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([call(runClockSaga), takeLatest(actionTypes.LOAD_DATA, loadDataSaga), takeLatest(actionTypes.ACTION_SAVE_TRANSACTION, transactionSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["/Users/amithkumar/with-redux-saga/saga.js"],"names":["runClockSaga","loadDataSaga","transactionSaga","rootSaga","all","call","delay","put","take","takeLatest","es6promise","actionTypes","failure","loadDataSuccess","tickClock","saveTransactionError","saveTransactionSuccess","ACTION_SAVE_TRANSACTION","polyfill","START_CLOCK","fetch","res","console","log","alert","json","data","LOAD_DATA"],"mappings":";;;;yBAUWA,Y;;;yBAQAC,Y;;;yBAWAC,e;;;yBAeAC,Q;;AA5CX;AAEA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,GAA3B,EAAgCC,IAAhC,EAAsCC,UAAtC,QAAwD,oBAAxD;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAO,oBAAP;AAEA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,EAAgDC,SAAhD,EAA2DC,oBAA3D,EAAiFC,sBAAjF,EAAyGC,uBAAzG,QAAwI,WAAxI;AAEAP,UAAU,CAACQ,QAAX;;AAEA,SAAWlB,YAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMQ,IAAI,CAACG,WAAW,CAACQ,WAAb,CAAV;;AADF;AAAA,eAES,IAFT;AAAA;AAAA;AAAA;;AAAA;AAGI,iBAAMZ,GAAG,CAACO,SAAS,CAAC,KAAD,CAAV,CAAT;;AAHJ;AAAA;AAII,iBAAMR,KAAK,CAAC,IAAD,CAAX;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,SAAWL,YAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEgB,iBAAMmB,KAAK,CAAC,iCAAD,CAAX;;AAFhB;AAEUC,UAAAA,GAFV;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOI,iBAAMd,GAAG,CAACK,OAAO,cAAR,CAAT;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWA,SAAWV,eAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AACEoB,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AADF;AAAA;AAGgB,iBAAMH,KAAK,CAAC,iCAAD,CAAX;;AAHhB;AAGUC,UAAAA,IAHV;AAIIC,UAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,IAAlC;AACAG,UAAAA,KAAK,+BAAwBH,IAAG,CAACI,IAAJ,EAAxB,EAAL;AANJ;AAOiB,iBAAMJ,IAAG,CAACI,IAAJ,EAAN;;AAPjB;AAOUC,UAAAA,IAPV;AAAA;AAQI,iBAAMnB,GAAG,CAACS,sBAAsB,CAACU,IAAD,CAAvB,CAAT;;AARJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUI,iBAAMnB,GAAG,CAACQ,oBAAoB,cAArB,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAWZ,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMC,GAAG,CAAC,CACRC,IAAI,CAACL,YAAD,CADI,EAERS,UAAU,CAACE,WAAW,CAACgB,SAAb,EAAwB1B,YAAxB,CAFF,EAGRQ,UAAU,CAACE,WAAW,CAACM,uBAAb,EAAsCf,eAAtC,CAHF,CAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,eAAeC,QAAf","sourcesContent":["/* global fetch */\n\nimport { all, call, delay, put, take, takeLatest } from 'redux-saga/effects'\nimport es6promise from 'es6-promise'\nimport 'isomorphic-unfetch'\n\nimport { actionTypes, failure, loadDataSuccess, tickClock, saveTransactionError, saveTransactionSuccess, ACTION_SAVE_TRANSACTION } from './actions'\n\nes6promise.polyfill()\n\nfunction * runClockSaga () {\n  yield take(actionTypes.START_CLOCK)\n  while (true) {\n    yield put(tickClock(false))\n    yield delay(1000)\n  }\n}\n\nfunction * loadDataSaga () {\n  try {\n    const res = yield fetch('http://localhost:3000/rest/test')\n    //console.log('Response from SAga', res);\n    //const data = yield res.json()\n    //yield put(loadDataSuccess(data))\n  } catch (err) {\n    yield put(failure(err))\n  }\n}\n\nfunction * transactionSaga () {\n  console.log('I am in Saga')\n  try {\n    const res = yield fetch('http://localhost:3000/rest/test');\n    console.log(res);\n    console.log('Response from SAga', res);\n    alert(`Submitting Name ABS ${res.json()}`)\n    const data = yield res.json()\n    yield put(saveTransactionSuccess(data))\n  } catch (err) {\n    yield put(saveTransactionError(err))\n  }\n}\n\n\nfunction * rootSaga () {\n  yield all([\n    call(runClockSaga),\n    takeLatest(actionTypes.LOAD_DATA, loadDataSaga),\n    takeLatest(actionTypes.ACTION_SAVE_TRANSACTION, transactionSaga)\n\n  ])\n}\n\nexport default rootSaga\n"]},"metadata":{},"sourceType":"module"}